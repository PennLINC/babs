# This is an example config yaml file for:
#   BIDS App:         fMRIPrep ("fmriprep")
#   BIDS App version: 20.2.3
#   Task:             `--sloppy` mode + without FreeSurfer reconstruction
#   Which system:     Slurm
#   Tested on which cluster:  MSI cluster
# fMRIPrep's Docker image is publicly available at: https://hub.docker.com/r/nipreps/fmriprep/

# WARNING!!!
#   This is only an example, which may not necessarily fit your purpose,
#   or be an optimized solution for your case,
#   or be compatible to the BIDS App version you're using.
#   Therefore, please change and tailor it for your case before use it!!!
# WARNING!!!
#   We'll use `--sloppy` testing mode of fMRIPrep.
#   Therefore this YAML file should only be used for testing purpose.
#   You should NOT use this YAML file to generate formal results!

# Arguments when executing the BIDS App using `singularity run`:
singularity_run:
    -w: "$BABS_TMPDIR"   # this is a placeholder. BABS will replace it with `${PWD}/.git/tmp/wkdir`
    --n_cpus: '1'
    --stop-on-first-crash: ""
    --fs-license-file: "/home/faird/zhaoc/software/FreeSurfer/license.txt"  # [FIX ME] path to FS license file
    --skip-bids-validation: Null  # Null or NULL is also a placeholder
    --output-spaces: "MNI152NLin6Asym:res-2"   # for two output spaces: e.g., "MNI152NLin6Asym:res-2 MNI152NLin2009cAsym"
    --force-bbr: ""
    -v: '-v'   # this is for double "-v"
    --sloppy: ''      # WARNING: use this only when testing
    --fs-no-reconall: ''   # WARNING: use this only when testing

# Output foldername(s) to be zipped, and the BIDS App version to be included in the zip filename(s):
#   per `--fs-no-reconall`, there won't be an output folder called `freesurfer`
zip_foldernames:
    fmriprep: "20-2-3"   # folder 'fmriprep' will be zipped into 'sub-xx_ses-yy_fmriprep-20-2-3.zip'

cluster_resources:
    interpreting_shell: "/bin/bash -l"   # --> "#!/bin/bash -l"
    # number_of_cpus: "1"     # --> "#SBATCH --cpus-per-task=1"
    hard_memory_limit: 25G   # --> "#SBATCH --mem=25G"
    temporary_disk_space: 200G    # --> "#SBATCH --tmp=200G"
    hard_runtime_limit: "72:00:00"    # --> "--time=72:00:00", i.e., 3 days.  Should NOT large than partition's time limit!
    customized_text: |
        #SBATCH -p k40
# Other choices of job partitions on MSI: amd2tb,ram256g,v100,k40
# Notes: Above `customized_text` is MSI Slurm cluster specific.
#   So it may not be relevant for other clusters

# Users need to add their customized bash command below,
#   they will be used as preambles in `participant_job.sh`
#   the commands should not be quoted!
script_preamble: |
    source /home/faird/shared/code/external/envs/miniconda3/load_miniconda3.sh   # [FIX ME] MSI cluster faird group. Replace filepath with yours.
    conda activate babs   # [FIX ME] replace 'babs' with your env variable name

# ^^ conda env above: where the scripts generated by BABS will run
#   not necessary the same one for running `babs-init`
# ^^ based on what you need on your cluster; some people even don't use `conda`...
# for MSI, might need to add command e.g., "module_load"

# Where to run the jobs:
job_compute_space: "/tmp"   # [FIX ME] MSI cluster

# Below is to filter out subjects (or sessions)
#   right now we only filter based on unzipped dataset
required_files:
    $INPUT_DATASET_#1:
        - "func/*_bold.nii*"
        - "anat/*_T1w.nii*"

# Alert messages that might be found in log files of failed jobs:
#   These messages may be helpful for debugging errors in failed jobs.
alert_log_messages:
    stdout:
        - "Exception: No T1w images found for"  # probably not needed, after setting `required_files`
        - "Excessive topologic defect encountered"
        - "Cannot allocate memory"
        - "mris_curvature_stats: Could not open file"
        - "Numerical result out of range"
        - "fMRIPrep failed"
    # stderr:
    #     - "xxxxx"
